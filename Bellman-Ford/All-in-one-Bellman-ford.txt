// Pseudocode: Bellman-Ford

Input -> A Weighted graph & a src node (with no negative cycles) & a destination node
Output -> Shortest distance from src node to all other nodes

n -> number of nodes in graph
m -> number of edges in graph

time complexity -> O(n) + O(1) + O(n*m) + O(n)
=> O(n * m)
=> O(|V| * |E|)
Space complexity -> O(n)

/*
u-----v

d[u] + c(u,v) < d[v]
=> d[v] = d[u] + c(u,v)

*/

- create a distance array "d" with all values to infinity
- create a parent array 
- parent[src] = 0
- d[src] = 0

- negative_cycle = false
- last_updated_node = -1

-for i = 1 to n-1:
    -for all edge "e":
        - if d[u] + w < d[v]:
            -d[v] = d[u] + w
            - parent[v] = u
            - if i==n:
                -negative_cycle = true
                -last_updated_node = v

- if negative_cycle == false:
    - print the distance array "d"
    - selected_node = destination_node
    - declare a vector path
    - while true:
        - path.push_back(selected_node)
        - if selected_node == src:
            -break
        selected_node = parent[selected_node]
    - reverse the vector path
    - print the path
- else
    - print negative cycle exists
    - selected_node = last_updated_node
    - for i = 1 to n - 1:
        - selected_node = parent[selected_node]
    - first_node = selected_node
    - declare a vector "cycle"
    - cycle.push_back(selected_node)
    - while true:
        - selected_node = parent[selected_node]
        - cycle.push_back == last_updated_node
        if selected_node == first_node:
            - break
    - reverse the "cycle" vector
    - print the cycle